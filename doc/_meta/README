----------------------------------------------------------------------
Development setup
Setting up the development environment after a fresh repository clone
----------------------------------------------------------------------
cd ~/Projects/Clients/Sangwapo
cp config/examples/database/database.yml config # Setup the database
cp config/examples/config/config.yml config # Setup the configuration files
cp config/examples/deploy.rb config # Setup the capistrano deployment recipe
cp config/examples/deploy/*.rb config/deploy # Setup deployment stage configuration

Set up the hosts (/etc/hosts)
127.0.0.1	sangwapo.dev		www.sangwapo.dev

Setup deployment references:
git remote add virtual deploy@rails.vm:/var/Repositories/Git/Sangwapo.git
git remote add staging deploy@genesis.vps:/var/Repositories/Git/Sangwapo.git
git remote add production deploy@deuteronomy.vps:/var/Repositories/Git/Sangwapo.git




Tests
=====
# Git
git push virtual
git push staging
git push production

# Guard for testing
cd ~/Projects/Clients/Sangwapo
bundle update
gem cleanup
rake db:drop
rake db:setup
rake db:test:prepare
bundle exec guard




Running the Application
=======================
cd ~/Projects/Clients/Sangwapo
rails server # In one terminal window - to run the application

cd ~/Projects/Clients/Sangwapo
rake jobs:work # In another terminal window - to run delayed job

cd ~/Projects/Clients/Sangwapo
rails console # In another terminal window - to set up admins




Administration
==============
Creating an administrator
# In the Rails console, select the user:
u = User.first
u.admin?

# Promote the user to administrator
u.promote
u.save
u.admin?




Gem management
==============
MAINTAIN GEM BUNDLE
bundle update
gem cleanup

DELETE ALL INSTALLED GEMS
gem list | cut -d" " -f1 | xargs gem uninstall -aIx




Continuous Application Deployment
=================================
# VIRTUAL
git checkout master
git merge dev
git push
git push virtual
cap virtual deploy
git tag "`date +virtual_%Y-%m-%d_%H%M%S`"

# STAGING
git checkout master
git merge dev
git push
git push staging
cap staging deploy
git tag "`date +staging_%m-%d_%H%M%S`"

# PRODUCTION
git checkout master
git merge dev
git push
git push production
cap production deploy
git tag "`date +production_%Y-%m-%d_%H%M%S`"



















----------------------------------------------------------------------
Virtual setup
----------------------------------------------------------------------
Need:
Git
ImageMagick
MariaDB					# Remember to install libmariadbclient-dev (for the mysql2 gem to work)
nginx
nodejs				# JavaScript runtime
RVM
SSH


Test SSH access:
ssh deploy@rails.vm
ssh vladimir@rails.vm

Set up the hosts (/etc/hosts):
ssh vladimir@rails.vm
Make sure the following line is in /etc/hosts:
127.0.0.1 rails.vm

Check that SSH "loops back" on the virtual machine (host key verification):
# On the local development machine
ssh deploy@rails.vm

# On the virtual machine
ssh deploy@rails.vm

Or

If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@rails.vm


Set up the Repository folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Repositories/Git
sudo chown -R deploy:deploy /var/Repositories/Git

Create the Git repository:
ssh deploy@rails.vm
cd /var/Repositories/Git/
mkdir Sangwapo.git
cd Sangwapo.git
git init --bare

Push to the Git repository:
# From the development machine:
cd ~/Projects/Clients/Sangwapo
git push virtual # or git push virtual master


Set up the Apps folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Apps
sudo chown -R deploy:deploy /var/Apps


# Configure nginx
# On the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/nginx
scp nginx.sangwapo.virtual.conf vladimir@rails.vm:~/sangwapo.virtual.conf


# On the virtual machine
# Set up the nginx configuration
ssh vladimir@rails.vm
sudo mv ~/sangwapo.virtual.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/sangwapo.virtual.conf /etc/nginx/sites-enabled/sangwapo.virtual


Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p Sangwapo
cd Sangwapo
sudo openssl genrsa -des3 -out sangwapo.virtual.key 1024

		pass phrase: sangwapo

sudo openssl req -new -key sangwapo.virtual.key -out sangwapo.virtual.csr

		Country Name: ZM
		Province: Lusaka Province
		Locality Name: Lusaka
		Organisation Name: Sangwapo Online Classifieds
		Orgnisational Unit Name: <Blank>
		Common Name: sangwapo.virtual.
		Email: itsupport@pencilcasestudios.com
		Challenge password: <Blank>
		Optional Company Name: <Blank>

sudo cp sangwapo.virtual.key sangwapo.virtual.key.original
sudo openssl rsa -in sangwapo.virtual.key.original -out sangwapo.virtual.key
sudo openssl x509 -req -days 365 -in sangwapo.virtual.csr -signkey sangwapo.virtual.key -out sangwapo.virtual.crt


Test the nginx configuration:
sudo nginx -t

If all is well, load the new nginx configuration:
sudo service nginx reload

Setup the MariaDB database user:
ssh vladimir@rails.vm
mysql -u root -p
create user 'sangwapo'@'localhost' identified by 'VirtualSangwapoPassword';
grant all on Sangwapo_virtual.* to 'sangwapo'@'localhost';
grant all on Sangwapo_virtual_development.* to 'sangwapo'@'localhost';
grant all on Sangwapo_virtual_test.* to 'sangwapo'@'localhost';

Setup the MariaDB database:
ssh deploy@rails.vm
mysql -u sangwapo -p
create database Sangwapo_virtual;
create database Sangwapo_virtual_development;
create database Sangwapo_virtual_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/monit
scp delayed_job.sangwapo.virtual.monitrc vladimir@rails.vm:~
cd ~/Projects/Clients/Sangwapo
ssh vladimir@rails.vm

# From the virtual machine
sudo mv ~/delayed_job.sangwapo.virtual.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/config
scp config.virtual.yml deploy@rails.vm:~/config.yml
cd ~/Projects/Clients/Sangwapo/config/examples/database
scp database.virtual.yml deploy@rails.vm:~/database.yml
cd ~/Projects/Clients/Sangwapo/
ssh deploy@rails.vm

# From the virtual machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/Sangwapo/virtual
mv database.yml ~/Projects/Configurations/Sangwapo/virtual/
mv config.yml ~/Projects/Configurations/Sangwapo/virtual/

# From the development machine
# Capistrano steps for initial deployment
# VIRTUAL MACHINE DEPLOYMENT
git checkout master
git merge dev
git push
git push virtual # May need to 'git push virtual master'
cap virtual deploy:setup # Update configuration files and create the database after this

# From the virtual machine (as the deploy user)
# After running cap virtual deploy:setup
cd ~/Projects/Configurations/Sangwapo/virtual
cp *.yml /var/Apps/Sangwapo/virtual/shared/config/

cap virtual deploy:check
cap virtual deploy:update
# Create databases
cap virtual deploy:migrate
cap virtual db:seed
cap virtual deploy:start


# After deploying the app
# From the virtual machine
sudo service monit reload



















----------------------------------------------------------------------
Staging setup
----------------------------------------------------------------------
Need:
Git
ImageMagick
MariaDB					# Remember to install libmariadbclient-dev (for the mysql2 gem to work)
nginx
nodejs				# JavaScript runtime
RVM
SSH


Test SSH access:
ssh deploy@genesis.vps
ssh silumesii@genesis.vps

Set up the hosts (/etc/hosts):
ssh silumesii@genesis.vps
Make sure the following line is in /etc/hosts:
127.0.0.1 genesis.vps

Check that SSH "loops back" on the staging machine (host key verification):
# On the local development machine
ssh deploy@genesis.vps

# On the staging machine
ssh deploy@genesis.vps

Or

If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@genesis.vps


Set up the Repository folder
ssh silumesii@genesis.vps
sudo mkdir -p /var/Repositories/Git
sudo chown -R deploy:deploy /var/Repositories/Git

Create the Git repository:
ssh deploy@genesis.vps
cd /var/Repositories/Git/
mkdir Sangwapo.git
cd Sangwapo.git
git init --bare

Push to the Git repository:
# From the development machine:
cd ~/Projects/Clients/Sangwapo
git push staging # or git push staging master


Set up the Apps folder
ssh silumesii@genesis.vps
sudo mkdir -p /var/Apps
sudo chown -R deploy:deploy /var/Apps


# Configure nginx
# On the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/nginx
scp nginx.sangwapo.clientcase.net.conf silumesii@genesis.vps:~/sangwapo.clientcase.net.conf


# On the staging machine
# Set up the nginx configuration
ssh silumesii@genesis.vps
sudo mv ~/sangwapo.clientcase.net.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/sangwapo.clientcase.net.conf /etc/nginx/sites-enabled/sangwapo.clientcase.net


Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p Sangwapo
cd Sangwapo
sudo openssl genrsa -des3 -out sangwapo.clientcase.net.key 1024

		pass phrase: sangwapo

sudo openssl req -new -key sangwapo.clientcase.net.key -out sangwapo.clientcase.net.csr

		Country Name: ZM
		Province: Lusaka Province
		Locality Name: Lusaka
		Organisation Name: Sangwapo Online Classifieds
		Orgnisational Unit Name: <Blank>
		Common Name: sangwapo.clientcase.net.
		Email: itsupport@pencilcasestudios.com
		Challenge password: <Blank>
		Optional Company Name: <Blank>

sudo cp sangwapo.clientcase.net.key sangwapo.clientcase.net.key.original
sudo openssl rsa -in sangwapo.clientcase.net.key.original -out sangwapo.clientcase.net.key
sudo openssl x509 -req -days 365 -in sangwapo.clientcase.net.csr -signkey sangwapo.clientcase.net.key -out sangwapo.clientcase.net.crt


Test the nginx configuration:
sudo nginx -t

If all is well, load the new nginx configuration:
sudo service nginx reload

Setup the MariaDB database user:
ssh silumesii@genesis.vps
mysql -u root -p
create user 'sangwapo'@'localhost' identified by 'StagingSangwapoPassword';
grant all on Sangwapo_staging.* to 'sangwapo'@'localhost';
grant all on Sangwapo_staging_development.* to 'sangwapo'@'localhost';
grant all on Sangwapo_staging_test.* to 'sangwapo'@'localhost';

Setup the MariaDB database:
ssh deploy@genesis.vps
mysql -u sangwapo -p
create database Sangwapo_staging;
create database Sangwapo_staging_development;
create database Sangwapo_staging_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/monit
scp delayed_job.sangwapo.clientcase.net.monitrc silumesii@genesis.vps:~
cd ~/Projects/Clients/Sangwapo
ssh silumesii@genesis.vps

# From the staging machine
sudo mv ~/delayed_job.sangwapo.clientcase.net.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/config
scp config.staging.yml deploy@genesis.vps:~/config.yml
cd ~/Projects/Clients/Sangwapo/config/examples/database
scp database.staging.yml deploy@genesis.vps:~/database.yml
cd ~/Projects/Clients/Sangwapo/
ssh deploy@genesis.vps

# From the staging machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/Sangwapo/staging
mv database.yml ~/Projects/Configurations/Sangwapo/staging/
mv config.yml ~/Projects/Configurations/Sangwapo/staging/
# After this, update:
# 1. the production database password
# 2. the production email password

# From the development machine
# Capistrano steps for initial deployment
# STAGING MACHINE DEPLOYMENT
git checkout master
git merge dev
git push
git push staging # May need to 'git push staging master'
cap staging deploy:setup # Update configuration files and create the database after this

# From the staging machine (as the deploy user)
# After running cap staging deploy:setup
cd ~/Projects/Configurations/Sangwapo/staging
cp *.yml /var/Apps/Sangwapo/staging/shared/config/

cap staging deploy:check
cap staging deploy:update
# Create databases
cap staging deploy:migrate
cap staging db:seed
cap staging deploy:start


# After deploying the app
# From the staging machine
sudo service monit reload



















----------------------------------------------------------------------
Production setup
----------------------------------------------------------------------
Need:
Git
ImageMagick
MariaDB					# Remember to install libmariadbclient-dev (for the mysql2 gem to work)
nginx
nodejs				# JavaScript runtime
RVM
SSH


Test SSH access:
ssh deploy@deuteronomy.vps
ssh silumesii@deuteronomy.vps

Set up the hosts (/etc/hosts):
ssh silumesii@deuteronomy.vps
Make sure the following line is in /etc/hosts:
127.0.0.1 deuteronomy.vps

Check that SSH "loops back" on the production machine (host key verification):
# On the local development machine
ssh deploy@deuteronomy.vps

# On the production machine
ssh deploy@deuteronomy.vps

Or

If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@deuteronomy.vps


Set up the Repository folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Repositories/Git
sudo chown -R deploy:deploy /var/Repositories/Git

Create the Git repository:
ssh deploy@deuteronomy.vps
cd /var/Repositories/Git/
mkdir Sangwapo.git
cd Sangwapo.git
git init --bare

Push to the Git repository:
# From the development machine:
cd ~/Projects/Clients/Sangwapo
git push production # or git push production master


Set up the Apps folder
ssh silumesii@deuteronomy.vps
sudo mkdir -p /var/Apps
sudo chown -R deploy:deploy /var/Apps


# Configure nginx
# On the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/nginx
scp nginx.sangwapo.com.conf silumesii@deuteronomy.vps:~/sangwapo.com.conf


# On the production machine
# Set up the nginx configuration
ssh silumesii@deuteronomy.vps
sudo mv ~/sangwapo.com.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/sangwapo.com.conf /etc/nginx/sites-enabled/sangwapo.com


Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p Sangwapo
cd Sangwapo
sudo openssl genrsa -des3 -out sangwapo.com.key 1024

		pass phrase: sangwapo

sudo openssl req -new -key sangwapo.com.key -out sangwapo.com.csr

		Country Name: ZM
		Province: Lusaka Province
		Locality Name: Lusaka
		Organisation Name: Sangwapo Online Classifieds
		Orgnisational Unit Name: <Blank>
		Common Name: sangwapo.com.
		Email: itsupport@pencilcasestudios.com
		Challenge password: <Blank>
		Optional Company Name: <Blank>

sudo cp sangwapo.com.key sangwapo.com.key.original
sudo openssl rsa -in sangwapo.com.key.original -out sangwapo.com.key
sudo openssl x509 -req -days 365 -in sangwapo.com.csr -signkey sangwapo.com.key -out sangwapo.com.crt


Test the nginx configuration:
sudo nginx -t

If all is well, load the new nginx configuration:
sudo service nginx reload

Setup the MariaDB database user:
ssh silumesii@deuteronomy.vps
mysql -u root -p
create user 'sangwapo_production'@'localhost' identified by 'ProductionSangwapoPassword';
grant all on Sangwapo_production.* to 'sangwapo_production'@'localhost';
grant all on Sangwapo_production_development.* to 'sangwapo_production'@'localhost';
grant all on Sangwapo_production_test.* to 'sangwapo_production'@'localhost';

Setup the MariaDB database:
mysql -u sangwapo_production -p
create database Sangwapo_production;
create database Sangwapo_production_development;
create database Sangwapo_production_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/monit
scp delayed_job.sangwapo.com.monitrc silumesii@deuteronomy.vps:~
cd ~/Projects/Clients/Sangwapo
ssh silumesii@deuteronomy.vps

# From the production machine
sudo mv ~/delayed_job.sangwapo.com.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Projects/Clients/Sangwapo/config/examples/config
scp config.production.yml deploy@deuteronomy.vps:~/config.yml
cd ~/Projects/Clients/Sangwapo/config/examples/database
scp database.production.yml deploy@deuteronomy.vps:~/database.yml
cd ~/Projects/Clients/Sangwapo/
ssh deploy@deuteronomy.vps

# From the production machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/Sangwapo/production
mv database.yml ~/Projects/Configurations/Sangwapo/production/
mv config.yml ~/Projects/Configurations/Sangwapo/production/
# After this, update:
# 1. the production database password
# 2. the production email password

# From the development machine
# Capistrano steps for initial deployment
# PRODUCTION MACHINE DEPLOYMENT
git checkout master
git merge dev
git push
git push production # May need to 'git push production master'
cap production deploy:setup # Update configuration files and create the database after this

# From the production machine (as the deploy user)
# After running cap production deploy:setup
cd ~/Projects/Configurations/Sangwapo/production
cp *.yml /var/Apps/Sangwapo/production/shared/config/

cap production deploy:check
cap production deploy:update
# Create databases
cap production deploy:migrate
cap production db:seed
cap production deploy:start


# After deploying the app
# From the production machine
sudo service monit reload



















Hints
=====
# Gem
# To fix warning: Insecure world writable dir /home/deploy/.rvm/gems/ruby-2.1.0@sangwapo-rails.3.2.x
# Ref: http://stackoverflow.com/questions/5380671/getting-the-warning-insecure-world-writable-dir-home-chance-in-path-mode-04
chmod go-w OFFENDING_PATH


# RVM
# Working with gemsets:
rvm @global do gem update
rvm @global do gem cleanup


# MariaDB
# Database export:
# The EXTENSION can be something like "sql"
mysqldump -u USERNAME -p DATABASE_NAME > ~/OUTPUTFILE.EXTENSION

# Database import:
mysql -u USERNAME -p DATABASE_NAME < BACKUPFILE


# Ubuntu
# gzip
gzip database.sql









Links
=====
http://gorails.com/deploy/ubuntu/12.04
http://stackoverflow.com/questions/3031412/how-to-export-a-mysql-database-using-command-prompt
http://webcheatsheet.com/SQL/mysql_backup_restore.php
http://www.modrails.com/documentation/Users%20guide%20Nginx.html (Note the "RVM helper tool" section)
https://dev.mysql.com/doc/refman/5.0/en/set-password.html
https://dev.mysql.com/doc/refman/5.1/en/mysqldump.html
https://rvm.io/gemsets/global
