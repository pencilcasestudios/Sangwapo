#----------------------------------------------------------------------
# Development setup
# Setting up the development environment after a fresh repository clone
#----------------------------------------------------------------------
cd ~/Code/Rails/Sangwapo
cp config/examples/database/database.yml config # Setup the database
cp config/examples/config/config.yml config # Setup the configuration files
cp config/examples/deploy.rb config # Setup the capistrano deployment recipe
cp config/examples/deploy/*.rb config/deploy # Setup deployment stage configuration

# Set up the hosts (/etc/hosts)
127.0.0.1	sangwapo.dev		www.sangwapo.dev

# Setup deployment references:
git remote add virtual deploy@rails.vm:/var/Repositories/Git/Sangwapo.git
git remote add staging deploy@asher.vps:/var/Repositories/Git/Sangwapo.git
git remote add production deploy@gad.vps:/var/Repositories/Git/Sangwapo.git




# Tests
#+=====
# Git
git push virtual
git push staging
git push production

# Update bundled gems
cd ~/Code/Rails/Sangwapo
bundle update
gem cleanup

# Install gems
cd ~/Code/Rails/Sangwapo
bundle install

# Guard for testing
cd ~/Code/Rails/Sangwapo
rake db:drop
rake db:setup
rake db:test:prepare
bundle exec guard




# Running the Application
#========================
cd ~/Code/Rails/Sangwapo
rails server # In one terminal window - to run the application

cd ~/Code/Rails/Sangwapo
rake jobs:work # In another terminal window - to run delayed job

cd ~/Code/Rails/Sangwapo
rails console # In another terminal window - to set up admins




# Administration
#===============
# Creating an administrator
# In the Rails console, select the user:
u = User.first
u.admin?

# Promote the user to administrator
u.promote
u.save
u.admin?




# Gem management
#===============
# MAINTAIN GEM BUNDLE
bundle update
gem cleanup

# DELETE ALL INSTALLED GEMS
gem list | cut -d" " -f1 | xargs gem uninstall -aIx




# Continuous Application Deployment
#==================================
# VIRTUAL
cd ~/Code/Rails/Sangwapo
git checkout master
git merge dev
git push
git push virtual
cap virtual deploy
git tag "`date +virtual_%Y-%m-%d_%H%M%S`"
git push bitbucket master
git push origin master --tags
git push bitbucket master --tags
notify-send "Virtual stage deployed"

# STAGING
cd ~/Code/Rails/Sangwapo
git checkout master
git merge dev
git push
git push staging
cap staging deploy
git tag "`date +staging_%Y-%m-%d_%H%M%S`"
git push bitbucket master
git push origin master --tags
git push bitbucket master --tags
notify-send "Staging stage deployed"

# PRODUCTION
cd ~/Code/Rails/Sangwapo
git checkout master
git merge dev
git push
git push production
cap production deploy
git tag "`date +production_%Y-%m-%d_%H%M%S`"
git push bitbucket master
git push origin master --tags
git push bitbucket master --tags
notify-send "Production stage deployed"



















#----------------------------------------------------------------------
#	Virtual setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@rails.vm
ssh vladimir@rails.vm

# Set up the hosts (/etc/hosts):
ssh vladimir@rails.vm

# Make sure the following line is in /etc/hosts:
127.0.0.1 rails.vm

# Check that SSH "loops back" on the virtual machine (host key verification):
# On the local development machine
ssh deploy@rails.vm

# On the virtual machine
ssh deploy@rails.vm

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@rails.vm


# Set up the Repository folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories/Git

# Create the Git repository:
ssh deploy@rails.vm
cd /var/Repositories/Git/
mkdir Sangwapo.git
cd Sangwapo.git
git init --bare

# Push to the Git repository:
# From the development machine:
cd ~/Code/Rails/Sangwapo
git remote add virtual deploy@rails.vm:/var/Repositories/Git/Sangwapo.git
git push virtual master # or git push virtual


# Set up the Apps folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Configure nginx
# On the development machine
cd ~/Code/Rails/Sangwapo/config/examples/nginx
scp nginx.sangwapo.virtual.conf vladimir@rails.vm:~/sangwapo.virtual.conf


# On the virtual machine
# Set up the nginx configuration
ssh vladimir@rails.vm
sudo mv ~/sangwapo.virtual.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/sangwapo.virtual.conf /etc/nginx/sites-enabled/sangwapo.virtual


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p Sangwapo
cd Sangwapo
sudo openssl genrsa -des3 -out sangwapo.virtual.key 1024

# pass phrase: sangwapo

sudo openssl req -new -key sangwapo.virtual.key -out sangwapo.virtual.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: Sangwapo Classifieds
# Orgnisational Unit Name: <Blank>
# Common Name: sangwapo.virtual.
# Email: itsupport@pencilcasestudios.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp sangwapo.virtual.key sangwapo.virtual.key.original
sudo openssl rsa -in sangwapo.virtual.key.original -out sangwapo.virtual.key

sudo openssl x509 -req -days 365 -in sangwapo.virtual.csr -signkey sangwapo.virtual.key -out sangwapo.virtual.crt

# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh vladimir@rails.vm
mysql -u root -p
create user 'sangwapo'@'localhost' identified by 'VirtualSangwapoPassword';
grant all on Sangwapo_virtual.* to 'sangwapo'@'localhost';
grant all on Sangwapo_virtual_development.* to 'sangwapo'@'localhost';
grant all on Sangwapo_virtual_test.* to 'sangwapo'@'localhost';

# Setup the MariaDB database:
ssh deploy@rails.vm
mysql -u sangwapo -p
create database Sangwapo_virtual;
create database Sangwapo_virtual_development;
create database Sangwapo_virtual_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Code/Rails/Sangwapo/config/examples/monit
scp delayed_job.sangwapo.virtual.monitrc vladimir@rails.vm:~
cd ~/Code/Rails/Sangwapo
ssh vladimir@rails.vm

# From the virtual machine
sudo mv ~/delayed_job.sangwapo.virtual.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Code/Rails/Sangwapo/config/examples/config
scp config.virtual.yml deploy@rails.vm:~/config.yml
cd ~/Code/Rails/Sangwapo/config/examples/database
scp database.virtual.yml deploy@rails.vm:~/database.yml
cd ~/Code/Rails/Sangwapo/
ssh deploy@rails.vm

# From the virtual machine
ssh deploy@rails.vm
cd
mkdir -p ~/Projects/Configurations/Sangwapo/virtual
mv database.yml ~/Projects/Configurations/Sangwapo/virtual/
mv config.yml ~/Projects/Configurations/Sangwapo/virtual/

# From the development machine
# Capistrano steps for initial deployment
# VIRTUAL MACHINE DEPLOYMENT
cd ~/Code/Rails/Sangwapo
git checkout master
git merge dev
git push
git push virtual # May need to 'git push virtual master'
cap virtual deploy:setup # Update configuration files and create the database after this

# From the virtual machine
# After running cap virtual deploy:setup
ssh deploy@rails.vm
cd ~/Projects/Configurations/Sangwapo/virtual
cp *.yml /var/Apps/Sangwapo/virtual/shared/config/

# Deploy the application
cd ~/Code/Rails/Sangwapo
cap virtual deploy:check
cap virtual deploy:update
# Create databases
cap virtual deploy:migrate
cap virtual db:seed
cap virtual deploy:start


# After deploying the app
# From the virtual machine
ssh vladimir@rails.vm
sudo service monit reload



















#----------------------------------------------------------------------
# Staging setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB				# Remember to install libmariadbclient-dev (for the mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@asher.vps
ssh silumesii@asher.vps

# Set up the hosts (/etc/hosts):
ssh silumesii@asher.vps
Make sure the following line is in /etc/hosts:
127.0.0.1 asher.vps

# Check that SSH "loops back" on the staging machine (host key verification):
# On the local development machine
ssh deploy@asher.vps

# On the staging machine
ssh deploy@asher.vps

Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@asher.vps


# Set up the Repository folder
ssh silumesii@asher.vps
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories/Git

# Create the Git repository:
ssh deploy@asher.vps
cd /var/Repositories/Git/
mkdir Sangwapo.git
cd Sangwapo.git
git init --bare

# Push to the Git repository:
# From the development machine:
cd ~/Code/Rails/Sangwapo
git remote add staging deploy@asher.vps:/var/Repositories/Git/Sangwapo.git
git push staging master # or git push virtual


# Set up the Apps folder
ssh silumesii@asher.vps
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Configure nginx
# On the development machine
cd ~/Code/Rails/Sangwapo/config/examples/nginx
scp nginx.sangwapo.clientcase.net.conf silumesii@asher.vps:~/sangwapo.clientcase.net.conf


# On the staging machine
# Set up the nginx configuration
ssh silumesii@asher.vps
sudo mv ~/sangwapo.clientcase.net.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/sangwapo.clientcase.net.conf /etc/nginx/sites-enabled/sangwapo.clientcase.net


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p Sangwapo
cd Sangwapo
sudo openssl genrsa -des3 -out sangwapo.clientcase.net.key 1024
# pass phrase: sangwapo

sudo openssl req -new -key sangwapo.clientcase.net.key -out sangwapo.clientcase.net.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: Sangwapo Classifieds
# Orgnisational Unit Name: <Blank>
# Common Name: sangwapo.clientcase.net.
# Email: itsupport@pencilcasestudios.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp sangwapo.clientcase.net.key sangwapo.clientcase.net.key.original
sudo openssl rsa -in sangwapo.clientcase.net.key.original -out sangwapo.clientcase.net.key

sudo openssl x509 -req -days 365 -in sangwapo.clientcase.net.csr -signkey sangwapo.clientcase.net.key -out sangwapo.clientcase.net.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh silumesii@asher.vps
mysql -u root -p
create user 'sangwapo'@'localhost' identified by 'StagingSangwapoPassword';
grant all on Sangwapo_staging.* to 'sangwapo'@'localhost';
grant all on Sangwapo_staging_development.* to 'sangwapo'@'localhost';
grant all on Sangwapo_staging_test.* to 'sangwapo'@'localhost';

# Setup the MariaDB database:
ssh deploy@asher.vps
mysql -u sangwapo -p
create database Sangwapo_staging;
create database Sangwapo_staging_development;
create database Sangwapo_staging_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Code/Rails/Sangwapo/config/examples/monit
scp delayed_job.sangwapo.clientcase.net.monitrc silumesii@asher.vps:~
cd ~/Code/Rails/Sangwapo
ssh silumesii@asher.vps

# From the staging machine
sudo mv ~/delayed_job.sangwapo.clientcase.net.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Code/Rails/Sangwapo/config/examples/config
scp config.staging.yml deploy@asher.vps:~/config.yml
cd ~/Code/Rails/Sangwapo/config/examples/database
scp database.staging.yml deploy@asher.vps:~/database.yml
cd ~/Code/Rails/Sangwapo/
ssh deploy@asher.vps

# From the staging machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/Sangwapo/staging
mv database.yml ~/Projects/Configurations/Sangwapo/staging/
mv config.yml ~/Projects/Configurations/Sangwapo/staging/
# After this, update:
# 1. the production database password
# 2. the production email password

# From the development machine
# Capistrano steps for initial deployment
# STAGING MACHINE DEPLOYMENT
cd ~/Code/Rails/Sangwapo/
git checkout master
git merge dev
git push
git push staging # May need to 'git push staging master'
cap staging deploy:setup # Update configuration files and create the database after this

# From the staging machine (as the deploy user)
# After running cap staging deploy:setup
ssh deploy@asher.vps
cd ~/Projects/Configurations/Sangwapo/staging
cp *.yml /var/Apps/Sangwapo/staging/shared/config/
exit

cd ~/Code/Rails/Sangwapo/
cap staging deploy:check
cap staging deploy:update
# Create databases
cap staging deploy:migrate
cap staging db:seed
cap staging deploy:start


# After deploying the app
# From the staging machine
cd ~/Code/Rails/Sangwapo
ssh silumesii@asher.vps
sudo service monit reload


# Setup database backup to Amazon S3
ssh deploy@asher.vps
mkdir -p ~/bin/scripts
cd ~/bin/scripts
git clone https://github.com/pencilcasestudios/db-backup.git

# We use s3cmd to interface with Amazon S3
# Ref: http://s3tools.org/s3cmd-howto
# To set up the tool for the first time run:
s3cmd --configure

# Access Key: AKIAI6TLAG6OEYQSGPBA
# Secret Key: Zfw4IOhP4Ip0gW44hhZMb0bytfZUkViCi7XoRJyG
# Encryption password: Amazon.S3.Encryption.Password
# Use HTTPs: Yes

# Verify and Test settings e.g.
# New settings:
#		Access Key: AKIAI6TLAG6OEYQSGPBA
#		Secret Key: Zfw4IOhP4Ip0gW44hhZMb0bytfZUkViCi7XoRJyG
#		Encryption password: Amazon.S3.Encryption.Password
#		Path to GPG program: /usr/bin/gpg
#		Use HTTPS protocol: True
#		HTTP Proxy server name:
#		HTTP Proxy server port: 0

# Update crontab:
crontab -e

# E.g. Add a line like:
@hourly	/home/deploy/.rvm/wrappers/ruby-2.2.1/ruby /home/deploy/bin/scripts/db-backup/db-backup.rb sangwapo Sangwapo_staging StagingSangwapoPassword pencilcasestudiosdatabases

# Note: The RVM wrapper can be found in ~/.rvm/wrappers



















#----------------------------------------------------------------------
# Production setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB				# Remember to install libmariadbclient-dev (for the mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@gad.vps
ssh silumesii@gad.vps

# Set up the hosts (/etc/hosts):
ssh silumesii@gad.vps
# Make sure the following line is in /etc/hosts:
127.0.0.1 gad.vps

# Check that SSH "loops back" on the production machine (host key verification):
# On the local development machine
ssh deploy@gad.vps

# On the production machine
ssh deploy@gad.vps

Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@gad.vps


# Set up the Repository folder
ssh silumesii@gad.vps
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories/Git

# Create the Git repository:
ssh deploy@gad.vps
cd /var/Repositories/Git/
mkdir Sangwapo.git
cd Sangwapo.git
git init --bare

# Push to the Git repository:
# From the development machine:
cd ~/Code/Rails/Sangwapo
git remote add production deploy@gad.vps:/var/Repositories/Git/Sangwapo.git
git push production master # or git push virtual


# Set up the Apps folder
ssh silumesii@gad.vps
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Configure nginx
# On the development machine
cd ~/Code/Rails/Sangwapo/config/examples/nginx
scp nginx.sangwapo.clientcase.net.conf silumesii@gad.vps:~/sangwapo.clientcase.net.conf


# On the production machine
# Set up the nginx configuration
ssh silumesii@gad.vps
sudo mv ~/sangwapo.clientcase.net.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/sangwapo.clientcase.net.conf /etc/nginx/sites-enabled/sangwapo.clientcase.net


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p Sangwapo
cd Sangwapo
sudo openssl genrsa -des3 -out sangwapo.clientcase.net.key 1024
# pass phrase: sangwapo

sudo openssl req -new -key sangwapo.clientcase.net.key -out sangwapo.clientcase.net.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: Sangwapo Classifieds
# Orgnisational Unit Name: <Blank>
# Common Name: sangwapo.clientcase.net.
# Email: itsupport@pencilcasestudios.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp sangwapo.clientcase.net.key sangwapo.clientcase.net.key.original
sudo openssl rsa -in sangwapo.clientcase.net.key.original -out sangwapo.clientcase.net.key

sudo openssl x509 -req -days 365 -in sangwapo.clientcase.net.csr -signkey sangwapo.clientcase.net.key -out sangwapo.clientcase.net.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh silumesii@gad.vps
mysql -u root -p
create user 'sangwapo'@'localhost' identified by 'ProductionSangwapoPassword';
grant all on Sangwapo_production.* to 'sangwapo'@'localhost';
grant all on Sangwapo_production_development.* to 'sangwapo'@'localhost';
grant all on Sangwapo_production_test.* to 'sangwapo'@'localhost';

# Setup the MariaDB database:
ssh deploy@gad.vps
mysql -u sangwapo -p
create database Sangwapo_production;
create database Sangwapo_production_development;
create database Sangwapo_production_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Code/Rails/Sangwapo/config/examples/monit
scp delayed_job.sangwapo.clientcase.net.monitrc silumesii@gad.vps:~
cd ~/Code/Rails/Sangwapo
ssh silumesii@gad.vps

# From the production machine
sudo mv ~/delayed_job.sangwapo.clientcase.net.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Code/Rails/Sangwapo/config/examples/config
scp config.production.yml deploy@gad.vps:~/config.yml
cd ~/Code/Rails/Sangwapo/config/examples/database
scp database.production.yml deploy@gad.vps:~/database.yml
cd ~/Code/Rails/Sangwapo/
ssh deploy@gad.vps

# From the production machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/Sangwapo/production
mv database.yml ~/Projects/Configurations/Sangwapo/production/
mv config.yml ~/Projects/Configurations/Sangwapo/production/
# After this, update:
# 1. the production database password
# 2. the production email password

# From the development machine
# Capistrano steps for initial deployment
# STAGING MACHINE DEPLOYMENT
cd ~/Code/Rails/Sangwapo/
git checkout master
git merge dev
git push
git push production # May need to 'git push production master'
cap production deploy:setup # Update configuration files and create the database after this

# From the production machine (as the deploy user)
# After running cap production deploy:setup
ssh deploy@gad.vps
cd ~/Projects/Configurations/Sangwapo/production
cp *.yml /var/Apps/Sangwapo/production/shared/config/
exit

cd ~/Code/Rails/Sangwapo/
cap production deploy:check
cap production deploy:update
# Create databases
cap production deploy:migrate
cap production db:seed
cap production deploy:start


# After deploying the app
# From the production machine
cd ~/Code/Rails/Sangwapo
ssh silumesii@gad.vps
sudo service monit reload


# Setup database backup to Amazon S3
ssh deploy@asher.vps
mkdir -p ~/bin/scripts
cd ~/bin/scripts
git clone https://github.com/pencilcasestudios/db-backup.git

# We use s3cmd to interface with Amazon S3
# Ref: http://s3tools.org/s3cmd-howto
# To set up the tool for the first time run:
s3cmd --configure

# Access Key: AKIAI6TLAG6OEYQSGPBA
# Secret Key: Zfw4IOhP4Ip0gW44hhZMb0bytfZUkViCi7XoRJyG
# Encryption password: Amazon.S3.Encryption.Password
# Use HTTPs: Yes

# Verify and Test settings e.g.
# New settings:
#		Access Key: AKIAI6TLAG6OEYQSGPBA
#		Secret Key: Zfw4IOhP4Ip0gW44hhZMb0bytfZUkViCi7XoRJyG
#		Encryption password: Amazon.S3.Encryption.Password
#		Path to GPG program: /usr/bin/gpg
#		Use HTTPS protocol: True
#		HTTP Proxy server name:
#		HTTP Proxy server port: 0

# Update crontab:
crontab -e

# E.g. Add a line like:
@hourly	/home/deploy/.rvm/wrappers/ruby-2.2.1/ruby /home/deploy/bin/scripts/db-backup/db-backup.rb sangwapo Sangwapo_staging StagingSangwapoPassword pencilcasestudiosdatabases

# Note: The RVM wrapper can be found in ~/.rvm/wrappers



















Hints
=====
# Gem
# To fix warning: Insecure world writable dir /home/deploy/.rvm/gems/ruby-2.1.5@sangwapo-rails.3.2.x
# Ref: http://stackoverflow.com/questions/5380671/getting-the-warning-insecure-world-writable-dir-home-chance-in-path-mode-04
chmod go-w OFFENDING_PATH


# RVM
# Working with gemsets:
rvm @global do gem update
rvm @global do gem cleanup


# MariaDB
# Database export:
# The EXTENSION can be something like "sql"
mysqldump -u USERNAME -p DATABASE_NAME > ~/OUTPUTFILE.EXTENSION

# Database import:
mysql -u USERNAME -p DATABASE_NAME < BACKUPFILE


# Ubuntu
# gzip
gzip database.sql









Links
=====
http://gorails.com/deploy/ubuntu/12.04
http://stackoverflow.com/questions/3031412/how-to-export-a-mysql-database-using-command-prompt
http://webcheatsheet.com/SQL/mysql_backup_restore.php
http://www.modrails.com/documentation/Users%20guide%20Nginx.html (Note the "RVM helper tool" section)
https://dev.mysql.com/doc/refman/5.0/en/set-password.html
https://dev.mysql.com/doc/refman/5.1/en/mysqldump.html
https://rvm.io/gemsets/global
